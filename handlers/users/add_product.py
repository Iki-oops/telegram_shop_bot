import logging
import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data.config import counter_products
from filters import IsPrivateAdmin, IsValidUrl
from keyboards.inline.to_inline_mode import to_inline_mode
from loader import dp, db
from states.create_product import Product
from utils.photo_link import photo_link


@dp.message_handler(Command('add_product'), IsPrivateAdmin())
async def new_product(message: types.Message):
    await message.answer('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.')
    await Product.first()


@dp.message_handler(state=Product.P1)
async def product_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text
    await message.answer('–û—Ç–ª–∏—á–Ω–æüëç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ.')
    await Product.next()


@dp.message_handler(state=Product.P2)
async def product_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö.')
    await Product.next()


@dp.message_handler(state=Product.P3)
async def product_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–µ–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É.üóæ')
    await Product.next()


@dp.message_handler(state=Product.P4, content_types=types.ContentType.PHOTO)
@dp.message_handler(IsValidUrl(), state=Product.P4, content_types=types.ContentType.TEXT)
async def product_photo(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.TEXT:
        link = message.text
    else:
        photo = message.photo[-1]
        link = await photo_link(photo)

    data = await state.get_data()
    title, description, price, photo_url = data.get('title'), data.get('description'), data.get('price'), link
    try:
        db.add_product(next(counter_products), title, description, price, link)
        await message.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—Éü•á.',
                             reply_markup=to_inline_mode)
        await state.finish()
    except sqlite3.IntegrityError:
        logging.error('–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏. add_product')
        await message.answer('–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.')


# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
@dp.message_handler(Command('add_product'))
async def no_allow_adding(message: types.Message):
    await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µüö´')


@dp.message_handler(state=Product.P4, content_types=types.ContentType.ANY)
async def product_photo_valid(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–∫—É, –ª–∏–±–æ —Å—Å—ã–ª–∫—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jpg')


@dp.message_handler(state=[Product.P1, Product.P2, Product.P3])
async def text_valid(message: types.Message):
    await message.answer('–¢–µ–∫—Å—Ç–æ–º, –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å.')
